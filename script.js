// ‡∏î‡∏∂‡∏á element ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const form = document.getElementById("entry-form");
const list = document.getElementById("entries-list");
const incomeEl = document.getElementById("income");
const expenseEl = document.getElementById("expense");
const balanceEl = document.getElementById("balance");
const systemToggle = document.getElementById("system-toggle");
const darkModeToggle = document.getElementById("darkmode-toggle");
const systemStatus = document.getElementById("system-status");
const pieCtx = document.getElementById("pieChart").getContext("2d");
const langButtons = document.querySelectorAll(".lang-btn");

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
let entries = JSON.parse(localStorage.getItem("entries")) || [];
let systemOnline = JSON.parse(localStorage.getItem("systemOnline")) || false;
let darkMode = JSON.parse(localStorage.getItem("darkMode")) || false;
let selectedLang = localStorage.getItem("language") || "th";

let pieChart;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏™‡∏£‡∏∏‡∏õ
function renderEntries() {
  list.innerHTML = "";
  let income = 0, expense = 0;

  entries.forEach((e, i) => {
    const li = document.createElement("li");
    li.innerHTML = `
      <span>${e.desc}: ${e.amount > 0 ? '+' : ''}${e.amount.toFixed(2)}</span>
      <button class="delete-btn" onclick="deleteEntry(${i})">üóë</button>
    `;
    list.appendChild(li);

    if (e.amount >= 0) income += e.amount;
    else expense += Math.abs(e.amount);
  });

  incomeEl.textContent = income.toFixed(2);
  expenseEl.textContent = expense.toFixed(2);
  balanceEl.textContent = (income - expense).toFixed(2);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
form.addEventListener("submit", (e) => {
  e.preventDefault();
  if (!systemOnline) {
    alert(selectedLang === "th" ? "‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" : "Offline mode: cannot add entry");
    return;
  }

  const desc = document.getElementById("desc").value.trim();
  const type = document.getElementById("type").value;
  const amount = parseFloat(document.getElementById("amount").value);

  if (!desc || isNaN(amount) || amount <= 0) return;

  const finalAmount = type === "income" ? amount : -amount;
  entries.push({ desc, amount: finalAmount, type });

  localStorage.setItem("entries", JSON.stringify(entries));
  form.reset();

  renderEntries();
  updateChart();
});

// ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° index
function deleteEntry(index) {
  entries.splice(index, 1);
  localStorage.setItem("entries", JSON.stringify(entries));
  renderEntries();
  updateChart();
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°
function updateChart() {
  let income = 0, expense = 0;
  entries.forEach(e => {
    if (e.amount >= 0) income += e.amount;
    else expense += Math.abs(e.amount);
  });

  if (pieChart) pieChart.destroy();

  pieChart = new Chart(pieCtx, {
    type: "pie",
    data: {
      labels: [langData[selectedLang].income, langData[selectedLang].expense],
      datasets: [{
        data: [income, expense],
        backgroundColor: ["#22c55e", "#ef4444"]
      }]
    },
    options: {
      plugins: {
        legend: { position: "bottom" }
      }
    }
  });
}

// ‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏•‡πà‡∏≤‡∏á
function showPage(id) {
  document.querySelectorAll(".page").forEach(p => p.classList.remove("active"));
  document.getElementById(id).classList.add("active");
  if (id === "chart-report") updateChart();
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå/‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå
systemToggle.checked = systemOnline;
systemStatus.textContent = systemOnline ? (selectedLang === "th" ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" : "Online") : (selectedLang === "th" ? "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå" : "Offline");
systemToggle.addEventListener("change", () => {
  systemOnline = systemToggle.checked;
  systemStatus.textContent = systemOnline ? (selectedLang === "th" ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" : "Online") : (selectedLang === "th" ? "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå" : "Offline");
  localStorage.setItem("systemOnline", JSON.stringify(systemOnline));
});

// ‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
darkModeToggle.checked = darkMode;
document.body.className = darkMode ? "dark" : "light";
darkModeToggle.addEventListener("change", () => {
  darkMode = darkModeToggle.checked;
  document.body.className = darkMode ? "dark" : "light";
  localStorage.setItem("darkMode", JSON.stringify(darkMode));
});

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
const langData = {
  th: {
    title: "FlowLedger 2025",
    descLabel: "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
    typeLabel: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
    income: "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö",
    expense: "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢",
    amountLabel: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
    add: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
    language: "‡∏†‡∏≤‡∏©‡∏≤",
    summary_income: "üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö:",
    summary_expense: "üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢:",
    summary_balance: "üßæ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:",
    menu_home: "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å",
    menu_chart: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
    menu_settings: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
    settings: "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
    darkmode: "‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô",
    system: "‡∏£‡∏∞‡∏ö‡∏ö",
    chart: "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü"
  },
  en: {
    title: "FlowLedger 2025",
    descLabel: "Description",
    typeLabel: "Type",
    income: "Income",
    expense: "Expense",
    amountLabel: "Amount",
    add: "Add Entry",
    language: "Language",
    summary_income: "üí∞ Income:",
    summary_expense: "üí∏ Expenses:",
    summary_balance: "üßæ Balance:",
    menu_home: "Home",
    menu_chart: "Report",
    menu_settings: "Settings",
    settings: "‚öôÔ∏è Settings",
    darkmode: "Dark Mode",
    system: "System",
    chart: "üìä Chart Report"
  }
};

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏õ‡∏∏‡πà‡∏°
function applyLanguage(lang) {
  selectedLang = lang;
  document.querySelectorAll("[data-i18n]").forEach(el => {
    const key = el.dataset.i18n;
    if (langData[lang][key]) el.textContent = langData[lang][key];
  });

  localStorage.setItem("language", lang);

  // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏õ‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏©‡∏≤
  langButtons.forEach(btn => {
    btn.classList.toggle("active", btn.dataset.lang === lang);
  });

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö (‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå/‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå)
  systemStatus.textContent = systemOnline
    ? (lang === "th" ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" : "Online")
    : (lang === "th" ? "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå" : "Offline");

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏ï‡πà‡∏≤‡∏á ‡πÜ
  renderEntries();
  updateChart();
}

// ‡∏ú‡∏π‡∏Å event ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤
langButtons.forEach(btn => {
  btn.addEventListener("click", () => {
    applyLanguage(btn.dataset.lang);
  });
});

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
applyLanguage(selectedLang);
renderEntries();
updateChart();
